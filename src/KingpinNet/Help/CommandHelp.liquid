<#@ template language="C#" visibility="public" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
usage: <#if (!string.IsNullOrEmpty(Application.Name)) { Write(Application.Name + " "); }#><#=Command.Name#> <# if (Command.Flags.Count() > 0) { #>[<flags>] <# } if (Command.Commands.Count() > 0) { #><command> <# } if (Command.Arguments.Count() > 1) { #>[<args> ...] <# } else if (Command.Arguments.Count() == 1) { #>[<<#= Command.Arguments.First().Name #>>]<# } #>


<#= Command?.Help ?? ""#>

<# if (Command.Flags != null) {
    var flags = Command.Flags.Where(x => !x.Hidden).ToList();

    if (flags.Count != 0) {
        var maxFlagLength = flags.Max(x => x.Name.Length + x.DefaultValue.Length) + 9;#>
Flags:
<#      foreach (var flag in flags) 
        {
            var defaultValue = "";
            if (!string.IsNullOrWhiteSpace(flag.DefaultValue))
                defaultValue = "=" + flag.DefaultValue;

            if (!string.IsNullOrWhiteSpace(flag.ValueName))
                defaultValue = "=" + flag.ValueName;

            if (flag.ShortName != 0) { #>
  -<#=flag.ShortName#>, --<#=flag.Name#><#=defaultValue#>   <#=flag.Help#> <#=GenerateExamples(flag.Examples)#>
<#          }
            else { #>
      --<#= flag.Name#><#=defaultValue#>   <#=flag.Help#> <#=GenerateExamples(flag.Examples)#>
<#          }
        }
    }
}#>
<#if (Command.Arguments != null && Command.Arguments.Count() != 0) { #>
Args:
<#
    var Arguments = new List<string>();
    var maxArgLength = Command.Arguments.Max(x => x.Name.Length) + 9;

    foreach (var arg in Command.Arguments)
    {
        int spacing = maxArgLength - arg.Name.Length;
        string finalString = $"  [<{arg.Name}>]".PadRight(spacing); #>
<#=finalString#>   <#=arg.Help#> <#=GenerateExamples(arg.Examples)#>
<#  }
}#>
<#if (Command.Commands != null && Command.Commands.Count() != 0) { #>
Commands:
<#
    var finalCommands = new List<Tuple<string, CommandItem>>();
    RecurseCommands("", Command.Commands, finalCommands);

    var commandNameLength = finalCommands.Max(c => c.Item1.Length);

    foreach (var command in finalCommands)
    {#>
  <#=command.Item1#> <#=CommandUsage(command.Item2)#>
    <#=command.Item2.Help#> <#GenerateExamples(command.Item2.Examples);#>

<#  }#>

<#}#>
